{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nconst CsvDataLoader = ({\n  stock,\n  setData\n}) => {\n  _s();\n  useEffect(() => {\n    const loadCsv = async () => {\n      const response = await fetch(`/${stock}.csv`); // Dynamically load CSV file based on selected stock\n      const csvText = await response.text();\n      const csvLines = csvText.split('\\n');\n      const headers = csvLines[0].split(',');\n      const parsedData = csvLines.slice(1).map(line => {\n        const values = line.split(',');\n        const entry = headers.reduce((obj, header, index) => {\n          var _values$index;\n          obj[header.trim()] = (_values$index = values[index]) === null || _values$index === void 0 ? void 0 : _values$index.trim();\n          return obj;\n        }, {});\n        return entry;\n      });\n      setData(parsedData);\n    };\n    if (stock) {\n      loadCsv();\n    }\n  }, [stock, setData]);\n  return null;\n};\n_s(CsvDataLoader, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CsvDataLoader;\nexport default CsvDataLoader;\nvar _c;\n$RefreshReg$(_c, \"CsvDataLoader\");","map":{"version":3,"names":["React","useEffect","CsvDataLoader","stock","setData","_s","loadCsv","response","fetch","csvText","text","csvLines","split","headers","parsedData","slice","map","line","values","entry","reduce","obj","header","index","_values$index","trim","_c","$RefreshReg$"],"sources":["/Users/sumedh/Desktop/bull/stock-prediction-app/src/components/CsvDataLoader.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst CsvDataLoader = ({ stock, setData }) => {\n  useEffect(() => {\n    const loadCsv = async () => {\n      const response = await fetch(`/${stock}.csv`); // Dynamically load CSV file based on selected stock\n      const csvText = await response.text();\n\n      const csvLines = csvText.split('\\n');\n      const headers = csvLines[0].split(',');\n\n      const parsedData = csvLines.slice(1).map(line => {\n        const values = line.split(',');\n        const entry = headers.reduce((obj, header, index) => {\n          obj[header.trim()] = values[index]?.trim();\n          return obj;\n        }, {});\n        return entry;\n      });\n\n      setData(parsedData);\n    };\n\n    if (stock) {\n      loadCsv();\n    }\n  }, [stock, setData]);\n\n  return null;\n};\n\nexport default CsvDataLoader;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5CJ,SAAS,CAAC,MAAM;IACd,MAAMK,OAAO,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAIL,KAAK,MAAM,CAAC,CAAC,CAAC;MAC/C,MAAMM,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAErC,MAAMC,QAAQ,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC;MACpC,MAAMC,OAAO,GAAGF,QAAQ,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MAEtC,MAAME,UAAU,GAAGH,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,IAAI;QAC/C,MAAMC,MAAM,GAAGD,IAAI,CAACL,KAAK,CAAC,GAAG,CAAC;QAC9B,MAAMO,KAAK,GAAGN,OAAO,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,EAAEC,KAAK,KAAK;UAAA,IAAAC,aAAA;UACnDH,GAAG,CAACC,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,IAAAD,aAAA,GAAGN,MAAM,CAACK,KAAK,CAAC,cAAAC,aAAA,uBAAbA,aAAA,CAAeC,IAAI,CAAC,CAAC;UAC1C,OAAOJ,GAAG;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,OAAOF,KAAK;MACd,CAAC,CAAC;MAEFf,OAAO,CAACU,UAAU,CAAC;IACrB,CAAC;IAED,IAAIX,KAAK,EAAE;MACTG,OAAO,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAACH,KAAK,EAAEC,OAAO,CAAC,CAAC;EAEpB,OAAO,IAAI;AACb,CAAC;AAACC,EAAA,CA3BIH,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AA6BnB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}