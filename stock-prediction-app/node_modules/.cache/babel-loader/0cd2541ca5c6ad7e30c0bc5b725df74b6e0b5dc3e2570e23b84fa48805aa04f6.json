{"ast":null,"code":"import Chart from 'chart.js/auto';\n\n// Simulated stock data\nconst stockData = {\n  TCS: [3200, 3180, 3220, 3240, 3230, 3250, 3260, 3240, 3270, 3290],\n  TATAMOTORS: [450, 460, 455, 465, 470, 468, 475, 473, 480, 485],\n  SUNPHARMA: [800, 810, 805, 815, 820, 818, 825, 823, 830, 835],\n  RELIANCE: [2400, 2420, 2410, 2430, 2440, 2435, 2450, 2445, 2460, 2470],\n  ITC: [350, 355, 352, 358, 360, 359, 362, 361, 365, 368],\n  INFY: [1300, 1320, 1310, 1330, 1340, 1335, 1350, 1345, 1360, 1370],\n  ICICIBANK: [750, 760, 755, 765, 770, 768, 775, 773, 780, 785],\n  HINDUNILVR: [2300, 2320, 2310, 2330, 2340, 2335, 2350, 2345, 2360, 2370],\n  HDFCBANK: [1600, 1620, 1610, 1630, 1640, 1635, 1650, 1645, 1660, 1670],\n  ADANIPOWER: [200, 205, 202, 208, 210, 209, 212, 211, 215, 218]\n};\n\n// DOM elements\nconst stockSelector = document.querySelector('.stock-selector');\nconst chartContainer = document.getElementById('chart-container');\nconst predictionText = document.getElementById('prediction-text');\nconst insightsList = document.getElementById('insights-list');\nconst marketTime = document.getElementById('market-time');\nconst loader = document.getElementById('loader');\n\n// Chart configuration\nlet chart;\n\n// Initialize the application\nfunction init() {\n  updateMarketTime();\n  setInterval(updateMarketTime, 60000);\n  populateStockSelector();\n  generateRandomInsights();\n  stockSelector.addEventListener('change', handleStockSelection);\n  setTimeout(() => {\n    loader.style.display = 'none';\n  }, 2000);\n}\n\n// Update market time\nfunction updateMarketTime() {\n  const now = new Date();\n  const hours = now.getHours();\n  const minutes = now.getMinutes();\n  const isMarketOpen = hours >= 9 && hours < 15 || hours === 15 && minutes < 30;\n  marketTime.textContent = isMarketOpen ? 'Market Open' : 'Market Closed';\n  marketTime.style.color = isMarketOpen ? 'var(--bullish)' : 'var(--bearish)';\n}\n\n// Populate stock selector\nfunction populateStockSelector() {\n  stockSelector.innerHTML = '<option value=\"\">Select a stock</option>';\n  Object.keys(stockData).forEach(stock => {\n    const option = document.createElement('option');\n    option.value = stock;\n    option.textContent = stock;\n    stockSelector.appendChild(option);\n  });\n}\n\n// Handle stock selection\nfunction handleStockSelection() {\n  const selectedStock = stockSelector.value;\n  if (selectedStock) {\n    updateChart(selectedStock);\n    updatePrediction(selectedStock);\n  }\n}\n\n// Update chart\nfunction updateChart(stock) {\n  const ctx = document.createElement('canvas');\n  chartContainer.innerHTML = '';\n  chartContainer.appendChild(ctx);\n  const data = stockData[stock];\n  const labels = Array.from({\n    length: data.length\n  }, (_, i) => `Day ${i + 1}`);\n  if (chart) {\n    chart.destroy();\n  }\n  chart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: stock,\n        data: data,\n        borderColor: 'var(--accent)',\n        backgroundColor: 'rgba(100, 255, 218, 0.1)',\n        tension: 0.1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: false\n        }\n      }\n    }\n  });\n}\n\n// Update prediction\nfunction updatePrediction(stock) {\n  const lastPrice = stockData[stock][stockData[stock].length - 1];\n  const secondLastPrice = stockData[stock][stockData[stock].length - 2];\n  const change = (lastPrice - secondLastPrice) / secondLastPrice * 100;\n  const trend = change > 0 ? 'bullish' : 'bearish';\n  predictionText.textContent = `${stock} shows a ${trend} trend with a ${change.toFixed(2)}% change. Our AI predicts continued ${trend} movement.`;\n  predictionText.style.color = trend === 'bullish' ? 'var(--bullish)' : 'var(--bearish)';\n}\n\n// Generate random insights\nfunction generateRandomInsights() {\n  const insights = [\"Global economic indicators suggest a potential market rally in the coming weeks.\", \"Tech sector shows signs of volatility due to ongoing chip shortage.\", \"Upcoming earnings reports may significantly impact market sentiment.\", \"Investors are closely watching central bank policies for potential rate changes.\", \"Renewable energy stocks gain traction amidst growing environmental concerns.\", \"Market analysts predict increased M&A activity in the healthcare sector.\", \"Cryptocurrency fluctuations continue to influence traditional market dynamics.\", \"Supply chain disruptions may affect consumer goods stocks in the short term.\", \"Emerging markets show resilience despite global economic uncertainties.\", \"AI and machine learning advancements drive innovation across multiple sectors.\"];\n  insightsList.innerHTML = '';\n  const shuffled = insights.sort(() => 0.5 - Math.random());\n  shuffled.slice(0, 5).forEach(insight => {\n    const li = document.createElement('li');\n    li.textContent = insight;\n    insightsList.appendChild(li);\n  });\n}\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', init);\n\n// Simulate real-time updates\nsetInterval(() => {\n  Object.keys(stockData).forEach(stock => {\n    const lastPrice = stockData[stock][stockData[stock].length - 1];\n    const change = (Math.random() - 0.5) * 10;\n    stockData[stock].push(Number((lastPrice + change).toFixed(2)));\n    stockData[stock].shift();\n  });\n  if (stockSelector.value) {\n    updateChart(stockSelector.value);\n    updatePrediction(stockSelector.value);\n  }\n  generateRandomInsights();\n}, 5000);","map":{"version":3,"names":["Chart","stockData","TCS","TATAMOTORS","SUNPHARMA","RELIANCE","ITC","INFY","ICICIBANK","HINDUNILVR","HDFCBANK","ADANIPOWER","stockSelector","document","querySelector","chartContainer","getElementById","predictionText","insightsList","marketTime","loader","chart","init","updateMarketTime","setInterval","populateStockSelector","generateRandomInsights","addEventListener","handleStockSelection","setTimeout","style","display","now","Date","hours","getHours","minutes","getMinutes","isMarketOpen","textContent","color","innerHTML","Object","keys","forEach","stock","option","createElement","value","appendChild","selectedStock","updateChart","updatePrediction","ctx","data","labels","Array","from","length","_","i","destroy","type","datasets","label","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","scales","y","beginAtZero","lastPrice","secondLastPrice","change","trend","toFixed","insights","shuffled","sort","Math","random","slice","insight","li","push","Number","shift"],"sources":["/Users/sumedh/Desktop/bull/stock-prediction-app/src/index.js"],"sourcesContent":["import Chart from 'chart.js/auto';\n\n// Simulated stock data\nconst stockData = {\n    TCS: [3200, 3180, 3220, 3240, 3230, 3250, 3260, 3240, 3270, 3290],\n    TATAMOTORS: [450, 460, 455, 465, 470, 468, 475, 473, 480, 485],\n    SUNPHARMA: [800, 810, 805, 815, 820, 818, 825, 823, 830, 835],\n    RELIANCE: [2400, 2420, 2410, 2430, 2440, 2435, 2450, 2445, 2460, 2470],\n    ITC: [350, 355, 352, 358, 360, 359, 362, 361, 365, 368],\n    INFY: [1300, 1320, 1310, 1330, 1340, 1335, 1350, 1345, 1360, 1370],\n    ICICIBANK: [750, 760, 755, 765, 770, 768, 775, 773, 780, 785],\n    HINDUNILVR: [2300, 2320, 2310, 2330, 2340, 2335, 2350, 2345, 2360, 2370],\n    HDFCBANK: [1600, 1620, 1610, 1630, 1640, 1635, 1650, 1645, 1660, 1670],\n    ADANIPOWER: [200, 205, 202, 208, 210, 209, 212, 211, 215, 218]\n};\n\n// DOM elements\nconst stockSelector = document.querySelector('.stock-selector');\nconst chartContainer = document.getElementById('chart-container');\nconst predictionText = document.getElementById('prediction-text');\nconst insightsList = document.getElementById('insights-list');\nconst marketTime = document.getElementById('market-time');\nconst loader = document.getElementById('loader');\n\n// Chart configuration\nlet chart;\n\n// Initialize the application\nfunction init() {\n    updateMarketTime();\n    setInterval(updateMarketTime, 60000);\n    populateStockSelector();\n    generateRandomInsights();\n    stockSelector.addEventListener('change', handleStockSelection);\n    setTimeout(() => {\n        loader.style.display = 'none';\n    }, 2000);\n}\n\n// Update market time\nfunction updateMarketTime() {\n    const now = new Date();\n    const hours = now.getHours();\n    const minutes = now.getMinutes();\n    const isMarketOpen = (hours >= 9 && hours < 15) || (hours === 15 && minutes < 30);\n    marketTime.textContent = isMarketOpen ? 'Market Open' : 'Market Closed';\n    marketTime.style.color = isMarketOpen ? 'var(--bullish)' : 'var(--bearish)';\n}\n\n// Populate stock selector\nfunction populateStockSelector() {\n    stockSelector.innerHTML = '<option value=\"\">Select a stock</option>';\n    Object.keys(stockData).forEach(stock => {\n        const option = document.createElement('option');\n        option.value = stock;\n        option.textContent = stock;\n        stockSelector.appendChild(option);\n    });\n}\n\n// Handle stock selection\nfunction handleStockSelection() {\n    const selectedStock = stockSelector.value;\n    if (selectedStock) {\n        updateChart(selectedStock);\n        updatePrediction(selectedStock);\n    }\n}\n\n// Update chart\nfunction updateChart(stock) {\n    const ctx = document.createElement('canvas');\n    chartContainer.innerHTML = '';\n    chartContainer.appendChild(ctx);\n\n    const data = stockData[stock];\n    const labels = Array.from({length: data.length}, (_, i) => `Day ${i + 1}`);\n\n    if (chart) {\n        chart.destroy();\n    }\n\n    chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: stock,\n                data: data,\n                borderColor: 'var(--accent)',\n                backgroundColor: 'rgba(100, 255, 218, 0.1)',\n                tension: 0.1\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: false\n                }\n            }\n        }\n    });\n}\n\n// Update prediction\nfunction updatePrediction(stock) {\n    const lastPrice = stockData[stock][stockData[stock].length - 1];\n    const secondLastPrice = stockData[stock][stockData[stock].length - 2];\n    const change = ((lastPrice - secondLastPrice) / secondLastPrice) * 100;\n    const trend = change > 0 ? 'bullish' : 'bearish';\n    predictionText.textContent = `${stock} shows a ${trend} trend with a ${change.toFixed(2)}% change. Our AI predicts continued ${trend} movement.`;\n    predictionText.style.color = trend === 'bullish' ? 'var(--bullish)' : 'var(--bearish)';\n}\n\n// Generate random insights\nfunction generateRandomInsights() {\n    const insights = [\n        \"Global economic indicators suggest a potential market rally in the coming weeks.\",\n        \"Tech sector shows signs of volatility due to ongoing chip shortage.\",\n        \"Upcoming earnings reports may significantly impact market sentiment.\",\n        \"Investors are closely watching central bank policies for potential rate changes.\",\n        \"Renewable energy stocks gain traction amidst growing environmental concerns.\",\n        \"Market analysts predict increased M&A activity in the healthcare sector.\",\n        \"Cryptocurrency fluctuations continue to influence traditional market dynamics.\",\n        \"Supply chain disruptions may affect consumer goods stocks in the short term.\",\n        \"Emerging markets show resilience despite global economic uncertainties.\",\n        \"AI and machine learning advancements drive innovation across multiple sectors.\"\n    ];\n\n    insightsList.innerHTML = '';\n    const shuffled = insights.sort(() => 0.5 - Math.random());\n    shuffled.slice(0, 5).forEach(insight => {\n        const li = document.createElement('li');\n        li.textContent = insight;\n        insightsList.appendChild(li);\n    });\n}\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', init);\n\n// Simulate real-time updates\nsetInterval(() => {\n    Object.keys(stockData).forEach(stock => {\n        const lastPrice = stockData[stock][stockData[stock].length - 1];\n        const change = (Math.random() - 0.5) * 10;\n        stockData[stock].push(Number((lastPrice + change).toFixed(2)));\n        stockData[stock].shift();\n    });\n    if (stockSelector.value) {\n        updateChart(stockSelector.value);\n        updatePrediction(stockSelector.value);\n    }\n    generateRandomInsights();\n}, 5000);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}